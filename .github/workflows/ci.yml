name: BisqApps

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # --- Common Build & Test (runs for all PRs, including forks) ---
  build:
    name: Build & Test (No Secrets)
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 (Azul Zulu)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'
          cache: gradle

      - name: Cache Gradle dependencies (Mac only)
        if: startsWith(matrix.os, 'macos')
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: macos-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/settings.gradle*', '**/build.gradle*', 'gradle/libs.versions.toml') }}
          restore-keys: |
            macos-gradle-

      - name: Cache Kotlin/Native (konan) (Mac only)
        if: startsWith(matrix.os, 'macos')
        uses: actions/cache@v4
        with:
          path: |
            ~/.konan
          key: macos-konan-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/settings.gradle*', '**/build.gradle*', 'gradle/libs.versions.toml') }}
          restore-keys: |
            macos-konan-


      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" "ndk;26.1.10909125"

      - name: Set up Xcode (Mac only)
        if: startsWith(matrix.os, 'macos')
        run: |
          sudo xcode-select -s /Applications/Xcode.app || true
          xcodebuild -version

      - name: Create fake local.properties
        run: |
          echo "KEYSTORE_PATH=/path/to/keystore" > local.properties
          echo "KEYSTORE_PASSWORD=yourKeystorePassword" >> local.properties
          echo "KEY_ALIAS=yourKeyAlias" >> local.properties
          echo "CLI_KEY_ALIAS=yourCliKeyAlias" >> local.properties
          echo "KEY_PASSWORD=yourKeyPassword" >> local.properties
          echo "CLI_KEY_PASSWORD=yourCliKeyPassword" >> local.properties

      - name: Run Android Tests (Ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        env:
          CI: true
        run: ./gradlew clean test -x :apps:nodeApp:testDebugUnitTest -x :apps:nodeApp:testReleaseUnitTest -x :apps:nodeApp:test --info

      - name: Generate dummy framework for CocoaPods (Mac only)
        if: startsWith(matrix.os, 'macos')
        run: ./gradlew :apps:clientApp:generateDummyFramework

      - name: Android compile-only (Mac only)
        if: startsWith(matrix.os, 'macos')
        run: ./gradlew :apps:clientApp:assembleDebug -x test -x lint

#      TODO seems GH default ci doesn't have support for this
#      - name: Headless Android emulator and run instrumentation tests
#        env:
#          CI: true
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: 33
#          target: default
#          arch: x86_64
#          profile: pixel_5
#          emulator-options: -no-snapshot -no-window -gpu swiftshader_indirect
#          disable-animations: true
#          script: ./gradlew clientApp:testDebugUnitTest clientApp:connectedDebugAndroidTest


#      If we figure out how to fix the Build iOS client task re-enable this
#      - name: Install CocoaPods dependencies (Mac only)
#        if: startsWith(matrix.os, 'macos')
#        working-directory: iosClient
#        run: pod install

#     Not needed anymore since we are not using xcodebuild
#      - name: Warm KMP compile outputs (Apple Silicon)
#        if: startsWith(matrix.os, 'macos') && runner.arch == 'ARM64'
#        run: |
#          ./gradlew :shared:domain:compileKotlinIosSimulatorArm64 :shared:presentation:compileKotlinIosSimulatorArm64 --no-daemon
#
#      - name: Warm KMP compile outputs (Intel)
#        if: startsWith(matrix.os, 'macos') && runner.arch == 'X64'
#        run: |
#          ./gradlew :shared:domain:compileKotlinIosX64 :shared:presentation:compileKotlinIosX64 --no-daemon

#     Takes way too much time in GH CI Actions
#      - name: Build iOS Client (Mac only)
#        if: startsWith(matrix.os, 'macos')
#        env:
#          GRADLE_OPTS: "-Dorg.gradle.configuration-cache=false -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false"
#        run: |
#          xcodebuild -workspace iosClient/iosClient.xcworkspace \
#            -scheme "iosClient Release" \
#            -configuration Release \
#            -sdk iphonesimulator \
#            -destination 'generic/platform=iOS Simulator' \
#            -parallelizeTargets NO \
#            -jobs 1 \
#            clean build \
#            CODE_SIGN_IDENTITY="" \
#            CODE_SIGNING_REQUIRED=NO \
#            CODE_SIGNING_ALLOWED=NO


      - name: Run iOS Tests (Intel runner)
        if: startsWith(runner.os, 'macOS') && runner.arch == 'X64'
        run: ./gradlew shared:presentation:iosX64Test

      - name: Run iOS Tests (Apple Silicon runner)
        if: startsWith(runner.os, 'macOS') && runner.arch == 'ARM64'
        run: ./gradlew shared:presentation:iosSimulatorArm64Test

  # --- Node-specific Maven build (needs secrets) ---
  node-maven:
    name: Node Build (Needs Secrets)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository # skip only fork PRs

    env:
      CI: true
      MAVEN_URL: ${{ secrets.MAVEN_URL }}
      MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
      MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 (Azul Zulu)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'
          cache: gradle

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" "ndk;26.1.10909125"

      - name: Create fake local.properties
        run: |
          echo "KEYSTORE_PATH=/path/to/keystore" > local.properties
          echo "KEYSTORE_PASSWORD=yourKeystorePassword" >> local.properties
          echo "KEY_ALIAS=yourKeyAlias" >> local.properties
          echo "CLI_KEY_ALIAS=yourCliKeyAlias" >> local.properties
          echo "KEY_PASSWORD=yourKeyPassword" >> local.properties
          echo "CLI_KEY_PASSWORD=yourCliKeyPassword" >> local.properties

      - name: Build Node Project with Maven Secrets
        run: |
          ./gradlew apps:nodeApp:clean apps:nodeApp:bundleDebug --refresh-dependencies --info
          ./gradlew apps:nodeApp:test
